name: ChatFlow CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Cache Backend Dependencies
      uses: actions/cache@v3
      with:
        path: server/node_modules
        key: ${{ runner.os }}-backend-${{ hashFiles('server/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-backend-

    - name: Cache Frontend Dependencies
      uses: actions/cache@v3
      with:
        path: public/node_modules
        key: ${{ runner.os }}-frontend-${{ hashFiles('public/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-frontend-

    - name: Install Backend Dependencies
      run: |
        cd server
        npm ci --prefer-offline

    - name: Install Frontend Dependencies
      run: |
        cd public
        npm ci --prefer-offline

    - name: Lint Backend Code
      run: |
        cd server
        npm run lint --if-present

    - name: Lint Frontend Code
      run: |
        cd public
        npm run lint --if-present

    - name: Run Backend Tests
      run: |
        cd server
        npm run test --if-present

    - name: Run Frontend Tests
      run: |
        cd public
        npm run test --if-present -- --coverage --detectOpenHandles --forceExit

    - name: Build Frontend
      run: |
        cd public
        npm run build

  docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker Images
      run: |
        docker compose build --no-cache

    - name: Test Docker Containers
      run: |
        docker compose up -d
        sleep 45
        # Check if containers are running
        docker compose ps
        # Test backend health
        curl -f http://localhost:5000/health || exit 1
        # Test frontend
        curl -f http://localhost:3000 || exit 1
        docker compose down
